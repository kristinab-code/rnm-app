{"ast":null,"code":"var _jsxFileName = \"/Users/kris/Documents/projects/js/my-app/src/Locations.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Locations() {\n  _s();\n  // Fetch Location Data\n  const [locations, setLocations] = useState([]);\n  useEffect(() => {\n    fetch('https://rickandmortyapi.com/api/location').then(response => response.json()).then(data => setLocations(data.results)).catch(error => console.error('Error fetching data:', error));\n  }, []);\n\n  // SVG Setup and Display Locations\n  const svgWidth = window.innerWidth;\n  const svgHeight = window.innerHeight;\n\n  // Determine the maximum number of inhabitants across all locations\n  const maxInhabitants = Math.max(...locations.map(location => location.residents.length));\n  return /*#__PURE__*/_jsxDEV(\"svg\", {\n    width: svgWidth,\n    height: svgHeight,\n    children: locations.map((location, index) => {\n      // Using the maxInhabitants value for normalization\n      const rectWidth = location.residents.length / maxInhabitants * svgWidth;\n      const rectHeight = svgHeight / locations.length;\n      return /*#__PURE__*/_jsxDEV(\"rect\", {\n        x: 0,\n        y: index * rectHeight,\n        width: rectWidth,\n        height: rectHeight,\n        fill: \"blue\",\n        children: [/*#__PURE__*/_jsxDEV(\"title\", {\n          children: [location.name, \": \", location.residents.length, \" inhabitants\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }, this), location.name, \": \", location.residents.length, \"inhabitants\"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n_s(Locations, \"MB6FmaD0YN2j72DuSocJeRR7/38=\");\n_c = Locations;\nexport default Locations;\nvar _c;\n$RefreshReg$(_c, \"Locations\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Locations","_s","locations","setLocations","fetch","then","response","json","data","results","catch","error","console","svgWidth","window","innerWidth","svgHeight","innerHeight","maxInhabitants","Math","max","map","location","residents","length","width","height","children","index","rectWidth","rectHeight","x","y","fill","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kris/Documents/projects/js/my-app/src/Locations.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nfunction Locations() {\n  // Fetch Location Data\n  const [locations, setLocations] = useState([]);\n\n  useEffect(() => {\n    fetch('https://rickandmortyapi.com/api/location')\n      .then(response => response.json())\n      .then(data => setLocations(data.results))\n      .catch(error => console.error('Error fetching data:', error));\n  }, []);\n\n  // SVG Setup and Display Locations\n  const svgWidth = window.innerWidth;\n  const svgHeight = window.innerHeight;\n\n  // Determine the maximum number of inhabitants across all locations\n  const maxInhabitants = Math.max(...locations.map(location => location.residents.length));\n\n  return (\n    <svg width={svgWidth} height={svgHeight}>\n      {locations.map((location, index) => {\n        // Using the maxInhabitants value for normalization\n        const rectWidth = (location.residents.length / maxInhabitants) * svgWidth;\n        const rectHeight = svgHeight / locations.length;\n\n        return (\n          <rect\n            key={index}\n            x={0}\n            y={index * rectHeight}\n            width={rectWidth}\n            height={rectHeight}\n            fill=\"blue\"\n          >\n            <title>{location.name}: {location.residents.length} inhabitants</title>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t  location.name\n\t\t\t\t\t\t}: {\n\t\t\t\t\t\t  location.residents.length\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinhabitants\n          </rect>\n        );\n      })}\n    </svg>\n  );\n}\n\nexport default Locations;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACdQ,KAAK,CAAC,0CAA0C,CAAC,CAC9CC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,IAAI,IAAIL,YAAY,CAACK,IAAI,CAACC,OAAO,CAAC,CAAC,CACxCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CAAC;EACjE,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAME,QAAQ,GAAGC,MAAM,CAACC,UAAU;EAClC,MAAMC,SAAS,GAAGF,MAAM,CAACG,WAAW;;EAEpC;EACA,MAAMC,cAAc,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGlB,SAAS,CAACmB,GAAG,CAACC,QAAQ,IAAIA,QAAQ,CAACC,SAAS,CAACC,MAAM,CAAC,CAAC;EAExF,oBACEzB,OAAA;IAAK0B,KAAK,EAAEZ,QAAS;IAACa,MAAM,EAAEV,SAAU;IAAAW,QAAA,EACrCzB,SAAS,CAACmB,GAAG,CAAC,CAACC,QAAQ,EAAEM,KAAK,KAAK;MAClC;MACA,MAAMC,SAAS,GAAIP,QAAQ,CAACC,SAAS,CAACC,MAAM,GAAGN,cAAc,GAAIL,QAAQ;MACzE,MAAMiB,UAAU,GAAGd,SAAS,GAAGd,SAAS,CAACsB,MAAM;MAE/C,oBACEzB,OAAA;QAEEgC,CAAC,EAAE,CAAE;QACLC,CAAC,EAAEJ,KAAK,GAAGE,UAAW;QACtBL,KAAK,EAAEI,SAAU;QACjBH,MAAM,EAAEI,UAAW;QACnBG,IAAI,EAAC,MAAM;QAAAN,QAAA,gBAEX5B,OAAA;UAAA4B,QAAA,GAAQL,QAAQ,CAACY,IAAI,EAAC,IAAE,EAACZ,QAAQ,CAACC,SAAS,CAACC,MAAM,EAAC,cAAY;QAAA;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,EAE3EhB,QAAQ,CAACY,IAAI,EACd,IAAE,EACDZ,QAAQ,CAACC,SAAS,CAACC,MAAM,EAC1B,aAEG;MAAA,GAdOI,KAAK;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAcN,CAAC;IAEX,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACrC,EAAA,CA9CQD,SAAS;AAAAuC,EAAA,GAATvC,SAAS;AAgDlB,eAAeA,SAAS;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}